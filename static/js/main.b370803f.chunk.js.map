{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["draggedItem","draggedOverItem","Todo","todo","index","toggleCompleteTodo","deleteTodo","onDragStart","onDragOver","onDragEnd","className","key","window","draggable","e","onClick","style","textDecoration","isCompleted","text","TodoForm","addTodo","useState","value","setValue","onSubmit","preventDefault","type","placeholder","onChange","target","App","initialTodos","localStorage","getItem","JSON","parse","todos","setTodos","useEffect","setItem","stringify","newTodos","splice","idxDragged","dataTransfer","effectAllowed","setData","parentNode","setDragImage","idxDragOver","filter","map","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oJAGIA,EACAC,E,4DAkBJ,SAASC,EAAT,GAQe,IAPbC,EAOY,EAPZA,KACAC,EAMY,EANZA,MACAC,EAKY,EALZA,mBACAC,EAIY,EAJZA,WACAC,EAGY,EAHZA,YACAC,EAEY,EAFZA,WACAC,EACY,EADZA,UAEA,OACE,yBAAKC,UAAU,OAAOC,IAAG,UAAKP,IACzB,iBAAkBQ,OAQjB,KAPF,0BACEC,WAAS,EACTN,YAAW,+GAAE,SAAAO,GAAC,OAAIP,EAAYO,EAAGV,MACjCI,WAAU,+GAAE,SAAAM,GAAC,OAAIN,EAAWM,EAAGV,MAC/BK,UAAWA,GACX,2CAGJ,uBACEM,QAAS,kBAAMV,EAAmBD,IAClCY,MAAO,CAACC,eAAgBd,EAAKe,YAAc,eAAiB,KAC3Df,EAAKgB,MAER,6BACE,4BAAQT,UAAU,SAASK,QAAS,kBAAMT,EAAWF,KAClD,IADH,qBAEM,OAOd,SAASgB,EAAT,GAAiE,IAA9CC,EAA6C,EAA7CA,QAA6C,EACpCC,mBAAS,IAD2B,mBACvDC,EADuD,KAChDC,EADgD,KAQ9D,OACE,0BAAMC,SAP4D,SAAAX,GAClEA,EAAEY,iBACGH,IACLF,EAAQE,GACRC,EAAS,OAIP,2BACEG,KAAK,OACLjB,UAAU,QACVkB,YAAY,eACZL,MAAOA,EACPM,SAAU,SAAAf,GAAC,OAAIU,EAASV,EAAEgB,OAAOP,WAyF1BQ,MApFf,WACE,IAAMC,EAAuBC,aAAaC,QAAQ,UAC9CC,KAAKC,MAAMH,aAAaC,QAAQ,WAAa,MAC7C,CACE,CAACf,KAAM,oBAAqBD,aAAa,GACzC,CAACC,KAAM,aAAcD,aAAa,GAClC,CAACC,KAAM,kBAAmBD,aAAa,IANhC,EAQaI,mBAASU,GARtB,mBAQNK,EARM,KAQCC,EARD,KASbC,qBAAU,WACRN,aAAaO,QAAQ,SAAUL,KAAKM,UAAUJ,MAC7C,CAACA,IAEJ,IAIMhC,EAA0C,SAAAD,GAC9C,IAAMsC,EAAQ,YAAOL,GACrBK,EAAStC,GAAOc,aAAcwB,EAAStC,GAAOc,YAC9CoB,EAASI,IAELpC,EAAkC,SAAAF,GACtC,IAAMsC,EAAQ,YAAOL,GACrBK,EAASC,OAAOvC,EAAO,GACvBkC,EAASI,IAELnC,EAAuD,SAC3DO,EACA8B,GAEaA,EACb5C,EAAcqC,EAAMO,GACpB9B,EAAE+B,aAAaC,cAAgB,OAC/BhC,EAAE+B,aAAaE,QACb,YADF,UAEMjC,EAAEgB,OAAuBkB,aAE/BlC,EAAE+B,aAAaI,aACZnC,EAAEgB,OAAmBkB,WACtB,GACA,KAGEvC,EAAY,WACH,MAETD,EAAsD,SAC1DM,EACAoC,GAKA,GAHApC,EAAEY,iBACFzB,EAAkBoC,EAAMa,GAEpBlD,IAAgBC,EAApB,CAIA,IAAIyC,EAAW,YAAIL,GAAOc,QAAO,SAAAhD,GAAI,OAAIA,EAAKgB,OAASnB,EAAYmB,QAEnEuB,EAASC,OAAOO,EAAa,EAAGlD,GAChCsC,EAASI,KAEX,OACE,yBAAKhC,UAAU,OACb,uCACA,yBAAKA,UAAU,aACZ2B,EAAMe,KAAI,SAACjD,EAAMC,GAAP,OACT,kBAACF,EAAD,CACES,IAAKP,EACLA,MAAOA,EACPD,KAAMA,EACNE,mBAAoBA,EACpBC,WAAYA,EACZC,YAAaA,EACbE,UAAWA,EACXD,WAAYA,OAGhB,kBAACY,EAAD,CAAUC,QAlEqB,SAAAF,GACnC,IAAMuB,EAAgB,sBAAOL,GAAP,CAAc,CAAClB,OAAMD,aAAa,KACxDoB,EAASI,SChFPW,EAAcC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,SAAwBvE,OAAO2C,SAAS6B,MACpDC,SAAWzE,OAAO2C,SAAS8B,OAIvC,OAGFzE,OAAO0E,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,SAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,GACHK,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BpD,OAAO2C,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OCvC/BE,I","file":"static/js/main.b370803f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nlet draggedItem: Todo; //draggedItem\nlet draggedOverItem: Todo; //draggedOver\nlet draggedIdx: number | null;\n\ntype TodoProps = {\n  todo: Todo;\n  index: number;\n  toggleCompleteTodo: (i: number) => void;\n  deleteTodo: (i: number) => void;\n  onDragStart(e: React.DragEvent, i: number): void;\n  onDragOver(e: React.DragEvent, i: number): void;\n  onDragEnd: () => void;\n};\n\ntype Todo = {\n  text: string;\n  isCompleted: boolean;\n};\n\nfunction Todo({\n  todo,\n  index,\n  toggleCompleteTodo,\n  deleteTodo,\n  onDragStart,\n  onDragOver,\n  onDragEnd,\n}: TodoProps) {\n  return (\n    <div className=\"todo\" key={`${index}`}>\n      {!('ontouchstart' in window) ? (\n        <span\n          draggable\n          onDragStart={e => onDragStart(e, index)}\n          onDragOver={e => onDragOver(e, index)}\n          onDragEnd={onDragEnd}>\n          <button>&#9776;</button>\n        </span>\n      ) : null}\n      <p\n        onClick={() => toggleCompleteTodo(index)}\n        style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}>\n        {todo.text}\n      </p>\n      <div>\n        <button className=\"delete\" onClick={() => deleteTodo(index)}>\n          {' '}\n          üóëÔ∏è{' '}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoForm({addTodo}: {addTodo: (text: string) => void}) {\n  const [value, setValue] = useState('');\n  const handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Add Todos ..\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\nfunction App() {\n  const initialTodos: Todo[] = localStorage.getItem('_todos')\n    ? JSON.parse(localStorage.getItem('_todos') || '{}')\n    : [\n        {text: 'Learn React Hooks', isCompleted: false},\n        {text: 'Make Coffe', isCompleted: false},\n        {text: 'Make a ToDo App', isCompleted: false},\n      ];\n  const [todos, setTodos] = useState(initialTodos);\n  useEffect(() => {\n    localStorage.setItem('_todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo: (t: string) => void = text => {\n    const newTodos: Todo[] = [...todos, {text, isCompleted: false}];\n    setTodos(newTodos);\n  };\n  const toggleCompleteTodo: (i: number) => void = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = newTodos[index].isCompleted ? false : true;\n    setTodos(newTodos);\n  };\n  const deleteTodo: (i: number) => void = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n  const onDragStart: (e: React.DragEvent, i: number) => void = (\n    e,\n    idxDragged,\n  ) => {\n    draggedIdx = idxDragged;\n    draggedItem = todos[idxDragged];\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData(\n      'text/html',\n      `${(e.target as HTMLElement).parentNode}`,\n    );\n    e.dataTransfer.setDragImage(\n      (e.target as Element).parentNode as Element,\n      20,\n      20,\n    );\n  };\n  const onDragEnd = () => {\n    draggedIdx = null;\n  };\n  const onDragOver: (e: React.DragEvent, i: number) => void = (\n    e,\n    idxDragOver,\n  ) => {\n    e.preventDefault();\n    draggedOverItem = todos[idxDragOver];\n    //if the item is dragged over itself, ignore\n    if (draggedItem === draggedOverItem) {\n      return;\n    }\n    // filter out the currently dragged item\n    let newTodos = [...todos].filter(todo => todo.text !== draggedItem.text);\n    // add the dragged item after draggedOverItem\n    newTodos.splice(idxDragOver, 0, draggedItem);\n    setTodos(newTodos);\n  };\n  return (\n    <div className=\"app\">\n      <h1> todo: </h1>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            toggleCompleteTodo={toggleCompleteTodo}\n            deleteTodo={deleteTodo}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n            onDragOver={onDragOver}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}