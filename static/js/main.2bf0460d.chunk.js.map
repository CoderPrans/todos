{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["draggedItem","draggedOverItem","Todo","_ref","todo","index","toggleCompleteTodo","deleteTodo","onDragStart","onDragEnd","onDragOver","react_default","a","createElement","className","key","concat","window","draggable","e","onClick","style","textDecoration","isCompleted","text","TodoForm","_ref2","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","preventDefault","type","placeholder","onChange","target","App","initialTodos","localStorage","getItem","JSON","parse","_useState3","_useState4","todos","setTodos","useEffect","setItem","stringify","newTodos","toConsumableArray","splice","idxDragged","dataTransfer","effectAllowed","setData","parentNode","setDragImage","idxDragOver","filter","map","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2bf0460d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nlet draggedItem = ''; //draggedItem\nlet draggedOverItem = ''; //draggedOver\nlet draggedIdx = '';\nfunction Todo({\n  todo,\n  index,\n  toggleCompleteTodo,\n  deleteTodo,\n  onDragStart,\n  onDragEnd,\n  onDragOver,\n}) {\n  return (\n    <div className=\"todo\" key={`${index}`}>\n      {!('ontouchstart' in window) ? (\n        <span\n          draggable\n          onDragStart={e => onDragStart(e, index)}\n          onDragOver={e => onDragOver(e, index)}\n          onDragEnd={onDragEnd}>\n          <button>&#9776;</button>\n        </span>\n      ) : null}\n      <p\n        onClick={() => toggleCompleteTodo(index)}\n        style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}>\n        {todo.text}\n      </p>\n      <div>\n        <button className=\"delete\" onClick={() => deleteTodo(index)}>\n          {' '}\n          üóëÔ∏è{' '}\n        </button>\n      </div>\n    </div>\n  );\n}\nfunction TodoForm({addTodo}) {\n  const [value, setValue] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Add Todos ..\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\nfunction App() {\n  const initialTodos = localStorage.getItem('_todos')\n    ? JSON.parse(localStorage.getItem('_todos'))\n    : [\n        {text: 'Learn React Hooks', isCompleted: false},\n        {text: 'Make Coffe', isCompleted: false},\n        {text: 'Make a ToDo App', isCompleted: false},\n      ];\n  const [todos, setTodos] = useState(initialTodos);\n  useEffect(() => {\n    localStorage.setItem('_todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, {text}];\n    setTodos(newTodos);\n  };\n  const toggleCompleteTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = newTodos[index].isCompleted ? false : true;\n    setTodos(newTodos);\n  };\n  const deleteTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n  const onDragStart = (e, idxDragged) => {\n    draggedIdx = idxDragged;\n    draggedItem = todos[idxDragged];\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  };\n  const onDragEnd = () => {\n    draggedIdx = null;\n  };\n  const onDragOver = (e, idxDragOver) => {\n    e.preventDefault();\n    draggedOverItem = todos[idxDragOver];\n    //if the item is dragged over itself, ignore\n    if (draggedItem === draggedOverItem) {\n      return;\n    }\n    // filter out the currently dragged item\n    let newTodos = [...todos].filter(todo => todo.text !== draggedItem.text);\n    // add the dragged item after draggedOverItem\n    newTodos.splice(idxDragOver, 0, draggedItem);\n    setTodos(newTodos);\n  };\n  return (\n    <div className=\"app\">\n      <h1> todo: </h1>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            toggleCompleteTodo={toggleCompleteTodo}\n            deleteTodo={deleteTodo}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n            onDragOver={onDragOver}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}