{"version":3,"sources":["../../../todos/src/App.js","../../../todos/src/serviceWorker.js","../../../todos/src/index.js"],"names":["Todo","_ref","todo","index","completeTodo","deleteTodo","react_default","a","createElement","className","onClick","style","textDecoration","isCompleted","text","TodoForm","_ref2","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","initialTodos","localStorage","getItem","JSON","parse","_useState3","_useState4","todos","setTodos","useEffect","setItem","stringify","newTodos","toConsumableArray","splice","map","key","concat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ece3f78.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction Todo({todo, index, completeTodo, deleteTodo}) {\nreturn  <div className=\"todo\">\n  <p onClick={() => completeTodo(index)} style={{ textDecoration: todo.isCompleted ? 'line-through' : ''}}>{todo.text}</p> \n    <div>\n      <button className=\"delete\" onClick={() => deleteTodo(index)}> üóëÔ∏è </button>\n    </div>\n    </div>\n}\n\nfunction TodoForm({addTodo}) {\n  const [value, setValue] = useState('')\n\n  const handleSubmit = e => {\n    e.preventDefault() \n    if(!value) return;\n    addTodo(value)\n    setValue('')\n  }\n\n  return <form onSubmit={handleSubmit}>\n    <input \n      type=\"text\" \n      className=\"input\" \n      placeholder=\"Add Todos ..\" \n      value={value} \n      onChange={e => setValue(e.target.value)} />\n    </form>\n}\n\nfunction App() {\n  const initialTodos = localStorage.getItem(\"_todos\") ? JSON.parse(localStorage.getItem(\"_todos\")) : [\n    {text: \"Learn React Hooks\", isCompleted: false}, \n    {text: \"Make Coffe\", isCompleted: false}, \n    {text: \"Make a ToDo App\", isCompleted: false} \n  ] \n  const [todos, setTodos] = useState(initialTodos)\n\n  useEffect(() => {\n    localStorage.setItem(\"_todos\", JSON.stringify(todos))\n  }, [todos])\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }] \n    setTodos(newTodos)\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos] \n    newTodos[index].isCompleted = true;\n    setTodos(newTodos)\n  }\n\n  const deleteTodo = index => {\n    const newTodos = [...todos] \n    newTodos.splice(index, 1)\n    setTodos(newTodos)\n  }\n\n    return (\n      <div className=\"app\">\n        <h1> todo: </h1>\n        <div className=\"todo-list\">\n          {todos.map((todo, index) => (\n            <Todo key={index} index={index} todo={todo} completeTodo={completeTodo} deleteTodo={deleteTodo}/> \n          ))}\n          <TodoForm addTodo={addTodo} />\n        </div>\n      </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}